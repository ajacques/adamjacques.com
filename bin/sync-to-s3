#!/usr/bin/env ruby

require 'aws-sdk-s3'
require 'json'
require 'net/http'
require 'sentry-ruby'

Sentry.init do |_config|
end

extensions = %w[.css .js .mp4]

bucket = Aws::S3::Resource.new.bucket(ENV['S3_BUCKET_NAME'])

def assets_files
  Dir.glob('public/assets/.sprockets-manifest-*.json').map do |manifest|
    JSON.parse(File.read(manifest))['files'].keys
  end.flatten.map do |file|
    "/assets/#{file}"
  end
end


def log(message)
  puts message
  Sentry.add_breadcrumb(Sentry::Breadcrumb.new(message: message))
end

def upload_asset(bucket, file, opts = {})
  mimes = {
    '.js' => 'application/javascript',
    '.css' => 'text/css',
    '.mp4' => 'video/mp4',
    '.html' => 'text/html'
  }
  mime = mimes[File.extname(file)]
  obj = bucket.object("web_content#{file}")
  if obj.exists?
    log "File #{file} already uploaded. Skipping."
    return
  end
  log "Uploading #{file}"
  obj.upload_file("./public/#{file}", opts.merge(content_type: mime))
end

def http_get
  raise 'Must set env variable "URI" and point to main server.' unless ENV.key? 'URI'
  url = URI.parse(ENV['URI'])
  response = Net::HTTP.get_response(url)
  raise 'Non 200 from website' unless response.code == '200'
  response.body
end

begin
  assets = []
  assets.concat(assets_files)

  assets
    .select { |file| extensions.include? File.extname(file) }
    .map do |file|
    upload_asset(bucket, file, cache_control: 'max-age=31556926')
  end

  bucket.object('web_content/index.html').put(
    body: http_get,
    cache_control: 'max-age=3600',
    content_type: 'text/html'
  )
rescue Exception => ex
  puts ex
  Sentry.capture_exception(ex)
  raise ex
end